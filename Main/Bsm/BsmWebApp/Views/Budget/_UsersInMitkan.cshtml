@model BsmWebApp.ViewModels.Budgets.BudgetMainViewModel

<style>
    /*Required in order to remove the margin from the autocomplete*/
     .k-animation-container {
        padding-left:0px !important;
        margin-left:0px !important;
    }

</style>

 <script>
     $(document).ready(function () {
         $("#MisparIshi").kendoAutoComplete({
             placeholder: "הקלד מ.א/שם עובד...",
             // dataTextField: "SiteName",
             // dataTextField: "MisparIshi",
             // dataValueField: "MisparIshi",
             filter: "startswith",
             minLength: 1,
             maxLength:5,
             dataSource: {
                 type: "json",
                 serverFiltering: true,
                 serverPaging: true,
                 pageSize: 20,
                 transport: {
                     read:
                         {
                             url: "Budget/GetMisparIshiWith" @* ?kod=@Model.KodMitkan&tarrich=@Model.Month"*@
                         }, //read
                     parameterMap: function () {// send value of autocomplete as the "startsWith" parameter
                         return {
                             startsWith: $("#MisparIshi").data("kendoAutoComplete").value()
                         };
                     }
                 } //transport
             } //datasource
         }); //kendoAutoComplete
     }); //DocumentReady


     //$(document).ready(function () {
     //    $("#OvedName").kendoAutoComplete({
     //        placeholder:"הקלד מ.א\שם עובד...",
     //        // dataTextField: "SiteName",
     //      //  dataTextField: "FullName",
     //      //  dataValueField: "FullName",
     //        filter: "startswith",
     //        minLength: 1,
     //        dataSource: {
     //            type: "json",
     //            serverFiltering: true,
     //            serverPaging: true,
     //            pageSize: 20,
     //            transport: {
     //                read:
     //                    {
     //                        url: "Budget/GetOvdimNameWith"
     //                    }, //read
     //                parameterMap: function () {// send value of autocomplete as the "startsWith" parameter
     //                    return {
     //                        startsWith: $("#OvedName").data("kendoAutoComplete").value()
     //                    };
     //                }
     //            } //transport
     //        } //datasource
     //    }); //kendoAutoComplete
     //}); //DocumentReady



 </script>
@using (Html.BeginForm())
{
     if (Model.IsMitkanBudgetDetailEmpty == false && Model.UsersInMitkan.Employees.Count > 0)
     {
@*<hr class="styled" />*@
@*<div>
        <input type="button" value="שמור" onclick="CheckHaveChanges()" />
    </div>*@

    <div class="bgGray" style="height: 64px;">
        <div class="row" style="padding-top: 18px">
            <div class="col-md-4">
                <label style="width: 20px; float: right"></label>
                <span style="clear:both">
                    <input id="MisparIshi" style="width: 250px" onfocus="this.select();" onkeydown="if (event.keyCode==13){ setTimeout(function(){ findDataItem();  }, 300); return false;} " class="styleTBSearch GeneralText TextBoxRO" />
                </span>
                <input class="SearchBG" onclick="findDataItem();" type="button" />
                @*    <input type="text"  id="txtSearch" class="TextBoxRO GeneralText styleTBSearch" value=""  />*@
                @*            @Html.TextBoxFor(m=>m.MisparIshi, new { @Value = "" , Style="margin-right:20px;" , @onblur = "CheakValid(this);", data_val_number="אנא הזן מספרים בלבד",required="false" ,@class = "styleTBSearch GeneralText TextBoxRO"})    *@
                @*   @Html.TextBoxFor(m=>m.MisparIshi, new { @Value = "" , Style="margin-right:20px;" ,data_val_number="אנא הזן מספרים בלבד",required="false" ,@class = "styleTBSearch GeneralText TextBoxRO"}) 
               *@


                @*  <input class="CheackBoxBG" type="checkbox" style="margin-right:65px;"/> 
                      <label  class="GeneralText">הצג חריגים בלבד</label>*@
            </div>

            <div class="col-md-2">

                <a id="AutoLink" href="#" onclick="DisplayAllocatedHoursOptions()">
                    <div id="divCal" style="text-align: right; width: 200px; text-align: left" class="pointer divCal">
                        <label id="lblAuto" class="PurpleTextBoldLink pointer" style="padding-top: 5px">הקצאה אוטומטית</label>
                    </div>
                </a>
                @*  <a class="PurpleTextBoldLink" ><img  src="~/Content/Images/calender.png" style="margin-right:150px"   />
                        הקצאה אוטומטית</a> *@
            </div>
            <div class="col-md-2">
                <a>
                    <div id="divIpus" style="text-align: right; width: 80px; text-align: left" onclick="ModifyGrid('ipus');" class="pointer divIpus">
                        <label id="lblIpus" class="PurpleTextBoldLink pointer" style="padding-top: 5px">איפוס</label>
                    </div>
                </a>


                @*  <a class="PurpleTextBoldLink"   > <img  src="~/Content/Images/refresh.png" style="margin-right:28px" />
                               איפוס</a>*@
                @*<label class="PurpleTextBoldLink"   >איפוס</label>*@
            </div>

            <div class="col-md-4" align="left" style="padding-left: 30px">
                <input type="button" id="btnUpdate" value="עדכן מכסות" style="width: 124px; margin-left: 10px"  class="PurpleButton DoubleArrow k-grid-save-changes" />
                <a id="cancel" class="PurpleTextBoldLink pointer k-grid-cancel-changes k-cancel" href="#" onclick="ModifyGrid('cancel');">בטל שינויים</a>
            </div>
        </div>
    </div>
    <div class="bgGray">
        <div class="BgFirstTitleGrid">
            <div class="col-md-8 divFirstHeader" style="padding-top: 5px">
                <label class="TextBold">נתוני עובד</label>
            </div>

            <div class="col-md-4 divFirstHeader" style="padding-left: 1px; border-right: 1px solid white; padding-top: 5px">
                <label class="TextBold">נתוני הקצאה לחודש נוכחי</label>
            </div>
        </div>
    </div>
 
    <div class="bgGray">


        @{
         //<a class="analyticsDetailsInfo" href="/Admin/ModifyExamAnalytic?examTypeId=225&analyticId=Core&addAnalytic=False">ערוך אנליטיקה</a>
         //Html.Kendo().Grid(Model.UsersInMitkan.Employees)
         Html.Kendo().Grid<BsmCommon.DataModels.Budgets.BudgetEmployeeGrid>()
            .Name("EmployeesList").Columns(columns =>
            {
                //  columns.Bound(o => o.MisparIshi).ClientTemplate("#=GetImage(data.MisparIshi)#").HtmlAttributes(new { style = "text-align: center; width: 30%; min-width: 60px;" });


                //  columns.Bound(o => o.MisparIshi).Title("נוכחות").ClientTemplate("<input type='button'  value='ff'   onclick='OpenKds();'   />").Width(80);
                columns.Template(o => o.MisparIshi).ClientTemplate("<img src='../../Content/Images/pai.png' onclick='OpenKds(#= MisparIshi #);' />").HtmlAttributes(new { @class = "pointer" });  //http://kds/Modules/Ovdim/NochechutMerukezet.aspx
                columns.Bound(o => o.MisparIshi).Title("מספר אישי");
                columns.Bound(o => o.FullName).Title("שם עובד").HtmlAttributes(new { @id = "tdName" });
                columns.Bound(o => o.TeurIsuk).Title("עיסוק");
                columns.Bound(o => o.AlTikni).Title("על תקני");
                columns.Bound(o => o.TeurMutamut).Title("מותאם");
                columns.Bound(o => o.TeurGil).Title("גיל");
                columns.Bound(o => o.MichsaYomit).Title("מכסה יומית");
                columns.Bound(o => o.NosafotPrev).Title("הקצאה לחודש קודם");
                columns.Bound(o => o.MichsaCur).Title("הקצאת שעות").HtmlAttributes(new { onfocusin = "focusInput(this);", onchange = "CheakValid(this);", @class = "CellEditGrid" }).Width(80);
                columns.Bound(o => o.ShaotShebuzu).Title("שעות שבוצעו");
                columns.Bound(o => o.Paar).Title("פער").HtmlAttributes(new { @id = "tdPaar" });//.ClientTemplate("<div style='direction:ltr'>#= Paar #</div>");//.HtmlAttributes(new { style = " direction:ltr;" });
                columns.Bound(o => o.ReadOnly).Hidden();

                ////columns.Bound(o => o.MisparIshi).Title("מספר אישי").Title("ddd").Width(80);
                ////columns.Bound(o => o.FullName).Title("שם עובד").Width(100);
                ////columns.Bound(o => o.TeurIsuk).Title("עיסוק").Width(100);
                ////columns.Bound(o => o.AlTikni).Title("על תקני").Width(50);
                ////columns.Bound(o => o.TeurMutamut).Title("קוד מותאם").Width(80);
                ////columns.Bound(o => o.TeurGil).Title("קוד גיל").Width(80);
                ////columns.Bound(o => o.MichsaYomit).Title("מכסה יומית </br> (כולל הלבשה)").Width(80);
                ////columns.Bound(o => o.NosafotPrev).Title(String.Format("{0:MM/yyyy}", Model.Month.AddMonths(-1)) + "</br>ש''נ שבוצעו").Width(80);
                ////columns.Bound(o => o.MichsaPrev).Title(String.Format("{0:MM/yyyy}", Model.Month.AddMonths(-1)) + "</br> מאפיין ש''נ</br>תפקיד ").Width(80);
                ////columns.Bound(o => o.NosafotCur).Title(String.Format("{0:MM/yyyy}", Model.Month) + "</br>ש''נ שבוצעו").Width(80);
                ////columns.Bound(o => o.MichsaCur).Title(String.Format("{0:MM/yyyy}", Model.Month) + "</br> מאפיין ש''נ</br>תפקיד ").HtmlAttributes(new { onchange = "ShowDialogsSave();", style = "border: 8px double lightgray;" }).Width(30);
                //////columns.Bound(o => o.MichsaCur).Title("מכסת ש''נ</br>  בחודש נוכחי").ClientTemplate("<input style='float: right;width:80px;' value='#=MichsaCur#'  name=''  />").Width(30);
                ////columns.Bound(o => o.NosafotNotUsed).Title(String.Format("{0:MM/yyyy}", Model.Month) + "</br> ש''נ בלתי  </br> מנוצלות").Width(80);

                // columns.Bound(o => o.MisparIshi).Filterable(false).Width(125).ClientTemplate(Html.Kendo().NumericTextBox().Name("mp_sss").Min(0).HtmlAttributes(new { value = "#=o.MisparIshi#", style = "width: 100px;" }).ToClientTemplate().ToHtmlString());
                // onclick="ShowPopUp('@Html.DisplayFor(model => model.KodMitkan)','@Html.DisplayFor(model => model.MitkanName)','@Html.ValueFor(model => model.Month, "{0:dd/MM/yyyy}")');
                //  columns.Bound(o => o.MisparIshi).Title("נוכחות").ClientTemplate("<input type='button'  style='float: right;'  value='הפק דוח' onclick='ShowReportNochechut(dataItem.MisparIshi, 4545)'  />").Width(80);
                ////columns.Bound(o => o.MisparIshi).Title("נוכחות").ClientTemplate("<input style='float: right;' type='button' value= 'הפק דוח' onclick='ShowReportNochechut(#= MisparIshi #);'     />").Width(80);


                //   columns.Bound(o => o.MisparIshi).Title("נוכחות").ClientTemplate("<input type='submit'  style='float: right;'  value='הפק דוח' name='action:Nochechut' />").Width(80);
                columns.Bound(o => o.MichsaMakor).HtmlAttributes(new { @id = "tdMakorVal" }).Hidden();

@* columns.Template(o=> @Html.ActionLink("הפק דו''ח","CreateNochechutRdl",new{ovedId=o.MisparIshi})).Width(100);
                   columns.Template(o=>{
                                    return string.Format("<a href='#' onclick='ShowPopUp({0});'>פתח</a>",o.MisparIshi);
                                    }).Width(100);*@


            })
             .ToolBar(toolbar =>
             {
                 toolbar.Custom().Text("עדכן מכסות").HtmlAttributes(new { @class = "k-grid-save-changes k-update" });
                 // toolbar.Custom().Text("עדכן מכסות").HtmlAttributes(new { @onclick = "CheckHaveChanges();", @class = "k-grid-save-changes k-update" });
                 toolbar.Custom().Text("בטל שינויים").HtmlAttributes(new { @class = "k-grid-cancel-changes k-cancel" });
             })

             .Editable(editable => editable.Mode(GridEditMode.InCell))
             .Pageable()
             .Sortable(c => c.AllowUnsort(false))



            //.Filterable()
             .Events(events => events.DataBound("onDataBound"))
             // .Events(events => events.Change("onChange").Remove("YourFunctionForAfterDelete")
             //.Editable(editable => editable.Mode(GridEditMode.InCell)) // Use in-cell editing mode
             .DataSource(dataSource =>
                 dataSource.Ajax()
                     .PageSize(12)
                     .ServerOperation(false)
                     .Batch(true) // Enable batch updates
                     .Model(model =>
                     {
                         model.Id(employee => employee.MisparIshi); // Specify the property which is the unique identifier of the model

                         model.Field(employee => employee.MisparIshi).Editable(false);
                         model.Field(employee => employee.FullName).Editable(false);
                         model.Field(employee => employee.TeurIsuk).Editable(false);
                         model.Field(employee => employee.AlTikni).Editable(false);
                         model.Field(employee => employee.TeurMutamut).Editable(false);
                         model.Field(employee => employee.TeurGil).Editable(false);
                         model.Field(employee => employee.MichsaYomit).Editable(false);
                         model.Field(employee => employee.NosafotPrev).Editable(false);
                         model.Field(employee => employee.NosafotCur).Editable(false);
                         model.Field(employee => employee.ShaotShebuzu).Editable(false);
                         model.Field(employee => employee.MichsaCur).Editable(DateTime.Now < Model.LastDateIdkunBank ? true : false);
                         model.Field(employee => employee.Paar).Editable(false);
                     })
                     //  .Read(read => read.Action("EmployeesInMitkanRead", "Budget", new { UsersInMitkan = Model.UsersInMitkan })) 
                 .Read(read => read.Action("EmployeesInMitkanRead", "Budget", new { KodYechida = Model.KodMitkan, month = Model.Month }))  // Action method invoked when the grid needs data
                     //.Create(create => create.Action("Products_Create", "Home")) // Action method invoked when the user saves a new data item
                 .Update(update => update.Action("EmployeesInMitkanUpdate", "Budget", new { KodYechida = Model.KodMitkan,month = Model.Month })) //"additionalInfo"))  // Action method invoked when the user saves an updated data item

                 .Events(events =>
                 {
                     events.Error("onError");
                 })
                 // .Events(events => events.Error("onError"))

             //   .Events(events => events.RequestEnd("onGridRequestEnd"))
             //.Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action method invoked when the user removes a data item

                 // .Update(update => update
             // .Action("EmployeesInMitkanUpdate", "Budget"))  // Action invoked when the user saves an updated data item
             // .Events(events => events.SaveChanges("CheckHaveChanges"))
                 )
             /*  .Events(events => events.SaveChanges(
                     @<text>
                       function(e) {
                       alert("jj");
                     CheckHaveChanges();
                       }
                       </text>
                       ))*/
            .Render();
   
        }

    </div>
    
    <div id="dialog-confirm"></div>
  
    <div id="dialog-allocated"></div>
    
     }


}

   <div  id="dialog-grid"></div>
<div id="dialogNoch" title="Basic dialog">
</div>

<script type="text/javascript">
    @*   function GetDataModel()
    {
        
        var modelView =  @Html.Raw(Json.Encode(Model));
   
       // var val= JSON.Encode(Model);
        var viewModel = JSON.stringify(modelView); //jQuery.parseJSON(modelView);//  ko.toJSON(modelView); //modelView.ToJson();
       
        return {
            model : viewModel
        }
    }*@


    function focusInput(val){

        setTimeout(function () {
            $(val).find('input').select();   
        }, 100);

        $(val).find('input').prop('maxLength', 6);
        $(val).find('input').mask('099.99',{  placeholder: ""});

    }

    
    function CheckNumber(obj){
        var val=  $(obj).find('input').val();
        var tav=  val.substring(val.length);
   
        if(IsNumeric(tav) == true || val=='.')
            return;
        else $(obj).find('input').val().replace(tav,'');
        
    }
    var displayMessage = @Model.ShouldDisplayMessage;
    var CanUpdate = true;
    $(document).ready(function(){
        if(displayMessage==1){
           // ModifyGrid("ipus");
            AlertMessage("לא נמצאו נתונים ליחידה והחודש הנבחר",170,330);
           // alert("Need to display message")
        }
        var model = @Html.Raw(Json.Encode(Model));
        CanUpdate = model.IsMonthToEdit;
       
        if(!CanUpdate)
            DisableElements();

    });

    function DisableElements()
    {
        $("#btnUpdate" ).addClass( "DisabledExec" );
        $("#btnUpdate").attr('disabled', 'disabled');
        $("#cancel").removeClass();
        $("#cancel").contents().unwrap().wrap("<span class='DisabledLink'></span>");

        //  $("#divIpus").attr("disabled", "disabled");
        $("#AutoLink").css({cursor:"default"});
        $("#lblIpus").removeClass();
        $("#lblIpus").addClass("DisabledLink");
        $("#lblAuto").removeClass();
        $("#lblAuto").addClass("DisabledLink");
        $("#divIpus").removeClass();
        $("#divIpus").addClass("DisabledIpus");
        $("#divCal").removeClass();
        $("#divCal").addClass("DisabledCal");
    }
    function OpenKds(misparishi)
    {
        //  alert('ggg');
        var model = @Html.Raw(Json.Encode(Model));
        var month =model.SelectedMonth;
        window.open("http://kdstest/Modules/Ovdim/NochechutMerukezet.aspx?mispar_ishi=" + misparishi +"&chodesh="+month);
        //     alert("ff");
    }


    function findDataItem() {
        //get grid datasource
        //  debugger;

        var theGrid = $('#EmployeesList')
        var dataItem = $('#MisparIshi');
        if(dataItem.val().trim() =="")
            return;

        var ds = theGrid.dataSource;
        var ds = $('#EmployeesList').data("kendoGrid").dataSource;//.data()[0].MisparIshi

        var view = kendo.data.Query.process(ds.data(), {
            filter: ds.filter(),
            sort: ds.sort()
        }).data;

        var index = -1;
        // find the index of the matching dataItem
        for (var x = 0; x < view.length; x++) {
            if (view[x].MisparIshi == dataItem.val() || view[x].FullName == dataItem.val()) { //dataItem.Id) {
                index = x;
                break;
            }
        }

        if (index === -1) {
            AlertMessage("מ.א/\שם  זה לא קיים למתקן זה",150,300);
         //   alert('מספר אישי זה לא קיים למתקן זה');
            return;
        }

        var page = Math.floor(index / ds.pageSize());
        var targetIndex = index - (page * ds.pageSize()) + 1;
        //page is 1-based index    
        ds.page(++page);
        //grid wants a html element. tr:eq(x) by itself searches in the first grid!    
        var row = $("#EmployeesList").find("tr:eq(" + targetIndex + ")")[0];
        theGrid.select(row);
        $("#EmployeesList").find("tr:eq(" + targetIndex + ")")[0].className = "clickable";
        return false;
        // console.log('Found it at Page: ' + page + 'index: ' + targetIndex);

    }

    function ModifyGrid(src) {
        if(!CanUpdate)
            return;

        var title="";

        if($("#EmployeesList").find("span.k-dirty").length == 0 && src=="cancel"){
            AlertMessage("לא בוצע שינוי במסך",150,300);
            return;
        }

        switch (src)
        {
            case "ipus":
                $("#dialog-confirm").html("עדכון זה יגרום לאיפוס השעות הנוספות שהוקצו לעובדים, האם לאפס?");
                title="  איפוס מכסות  ";
                break;
            case "cancel":
                $("#dialog-confirm").html("עדכון זה יגרום לביטול השעות שעדכנת כעת, האם לבטל שינויים?");
                title="  ביטול שינויים ";
                break;   
        }
           
        //alert(title);
        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({    
            resizable: false,
            modal: true,
            title: title,
            height: 200,
            width: 400,
            focus: function( event, ui ) {document.activeElement.blur();},
            buttons: {
                "כן": function () {
                    $(this).dialog('close');

                    switch (src)
                    {
                        case "ipus":
                            var grid = $("#EmployeesList").data("kendoGrid");
                            var data = grid.dataSource.data();
                            
                                $.each(data, function (i, row) {
                                    var dt = row;
                                    if(dt.ReadOnly == "false" &&  dt.MichsaCur != 0 )
                                    {
                                        dt.MichsaCur = 0;
                                        dt.dirty = true;
                                        grid._modelChange({ field: "MichsaCur", model: dt });
                                    }
                                });
                            
                                SimunEdit();
                            break;
                        case "cancel":
                            var grid = $("#EmployeesList").data("kendoGrid");
                            grid.cancelChanges();
                            break;   
                    }
                },
                "לא": function () {
                    $(this).dialog('close');
                  
                }
            }
        });
      
    }
    $(".k-grid-save-changes").click(function(e) { return CheckHaveChanges(e);  });
    $(".k-link").click(function(e) { return GoFirstPage(e);  });

    function GoFirstPage(e)
    {
        var grid = $("#EmployeesList").data("kendoGrid");
        var pager = grid.pager;
        pager.page(1);
    }
    // $(".k-grid-cancel-changes").click(function(e) { xx();});
    var ShowdSave=true;
    //var ShowCancel=true;
    function CheakValid(e)
    {
        //  var x=this;
        ShowdSave=true;
        var erechMakor = $(e.parentNode).find("td#tdMakorVal")[0].outerText;
        var newVal= e.firstChild.value;

        if(erechMakor.trim() != newVal.trim())
        {
            ($(e.parentNode).find("td#tdName"))[0].className="editCell";
            ($(e.parentNode).find("span")).removeClass("k-dirty");
            if (!IsDecimal(e.firstChild.value))
            { //PurpleButton 
                //$( "#btnNextMonth" ).addClass( "DisabledExec" );
     
                $(e.parentNode).find("input#MichsaCur").attr("data-val-number","יש להכניס ערך מספרי בפורמט 999.99");//.replace('number', '55555555');
                //   $( "#btnUpdate" ).removeClass( "PurpleButton" );
                $( "#btnUpdate" ).addClass( "DisabledExec" );
                $("#btnUpdate").attr('disabled', 'disabled');
           
            } else { 
                $("#btnUpdate").attr('disabled', '');
                $("#btnUpdate").removeAttr('disabled');
                $( "#btnUpdate" ).removeClass( "DisabledExec" );
            }
            // e.parentNode.cells[2].className="editCell";
        }

    }

    function IsDecimal(sText){    
        var ValidChars = "0123456789-.";
        var IsNumber=true;
        var Char;    	 
        for (i = 0; i < sText.length && IsNumber == true; i++){ 		   
            Char = sText.charAt(i); 
            if (ValidChars.indexOf(Char) == -1){			    
                IsNumber = false;
            }
        }
        return IsNumber;			   
    }

    function CheckHaveChanges(e)
    {
        var grid = $("#EmployeesList").data("kendoGrid");
        var data = grid.dataSource.data();
        var num=0;
        var sum=0;
        $.each(data, function (i, row) {
            var dt = row;
            if (dt.dirty == false)
                num++;
            sum=sum +=dt.MichsaCur;
        });
        if (data.length == num){
            AlertMessage("לא בוצע שינוי במסך",150,300);
         //   alert("לא בוצע שינוי במסך");
            return false;
        }
        else{
            
            var model = @Html.Raw(Json.Encode(Model));
            if(sum>+(model.MitkanBudgetDetail.BudgetVal))
            {
                AlertMessage("לא ניתן לבצע שמירה: סה''כ המכסות שעודכנו גדול מתקציב השעות הנוספות",180,400);
             //   alert("לא ניתן לבצע שמירה: סה''כ המכסות שעודכנו גדול מתקציב השעות הנוספות");
            }
            else
            {
                $("#dialog-confirm").html("עדכון זה יגרום לעדכון שעות נוספות לעובדים, האם לעדכן?");
                //   return  confirm('הנך בטוח שאתה רוצה לעדכן את המכסות?'); 
       
                if(ShowdSave == true)
                {
                    // Define the Dialog and its properties.
                    $("#dialog-confirm").dialog({    
                        resizable: false,
                        modal: true,
                        title: " עידכון מכסות ",
                        height: 200,
                        width: 400,
                        focus: function( event, ui ) {
                            document.activeElement.blur();},
                        buttons: {
                            "כן": function () {
                                $(this).dialog('close');
                                ShowdSave= false;
                              //  showProgress();
                                $(".k-grid-save-changes").click();
                                
                                var pager = grid.pager;
                                pager.page(1);

                                return true;
                            },
                            "לא": function () {
                                $(this).dialog('close');
                                return false;
                            }
                        }
                    });
                    return false;
                }else return true;
            }
        }
    }
   
    function onDataBound(arg) {
        var grid = $("#EmployeesList").data("kendoGrid");
        var trs = grid.tbody.find('tr');
        var now= new Date();
        var model = @Html.Raw(Json.Encode(Model));

        trs.each(function () {
            var dt = grid.dataItem($(this));
            if (dt.dirty == true) {
                grid._modelChange({ field: "MichsaCur", model: dt });
            }
            if(dt.Paar.toString().indexOf("-")>-1)
            {
                var val = dt.Paar.toString().split("-");
                $(this).find('td#tdPaar')[0].innerHTML = val[1]+  "-" ;
            }
            if(dt.ReadOnly == "true" || !(CanUpdate))
            {        
                $(this).find('td.CellEditGrid').prop( "disabled", true ).css( 'color','#bbbbbb');
            }
            //else{
            //    $(this).find('input#MichsaCur').prop('maxLength', 6);
            //}
        });
     
        SimunEdit();
    //    $("#EmployeesList").data("kendoGrid").dataSource.page(1);
      
       // $("input[name='MichsaCur']").prop('maxLength', 6);
     //   $("input#MichsaCur").prop('maxLength', 6);
    }

    $(function(){
        $("#dialog-allocated").dialog({
            autoOpen: false, width: 450, height:300,modal:true
        });
    });

    function DisplayAllocatedHoursOptions()
    {
        if(!CanUpdate)
            return;
        var url= "Budget/GetAllocatedHoursType";
        $("#dialog-allocated").html("")
        .dialog("option","title","הקצאה אוטומטית")
        .load(url,function(){
            $("#dialog-allocated").dialog("open");
        });

    }

  

    function dispalyResult(val)
    {
        $("#dialog-allocated").dialog('close');
      
        switch (val)
        {
            case "1":
                CopyMichsotLastMonth();
                break;
            case "2":
                alert(val);
                break;  
            case "3":
                CopyMichsotFromShaotShebuzu();
                break;  
        }  
        SimunEdit();
    }
    function CopyMichsotLastMonth(){
        var grid = $("#EmployeesList").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function (i, row) {
            var dt = row;
            if(dt.ReadOnly == "false" &&  dt.MichsaCur != dt.NosafotPrev)
            {
                dt.MichsaCur = dt.NosafotPrev;
                dt.dirty = true;
                grid._modelChange({ field: "MichsaCur", model: dt });
            }
            else{
                dt.dirty = false;
            }
        });
    }
    function CopyMichsotFromShaotShebuzu(){
        var grid = $("#EmployeesList").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function (i, row) {
            var dt = row;
            if(dt.ReadOnly == "false" &&  dt.MichsaCur != dt.ShaotShebuzu)
            {
                dt.MichsaCur = dt.ShaotShebuzu;
                dt.dirty = true;
                grid._modelChange({ field: "MichsaCur", model: dt });
            } else{
                dt.dirty = false;
            }
        });
    }

    function SimunEdit()
    {
        var grid = $("#EmployeesList").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function (i, row) {
            var dt = row;
            if(dt.dirty == true)
            {
              //  row.find("td#tdName")
             //   $(this).find("td#tdName")[0].className="editCell";
                grid.table.find("tr[data-uid='" + row.uid + "']").find("td#tdName").addClass("editCell");  //.addClass("highlighted-row");

            }
            if(dt.ShaotShebuzu > dt.MichsaCur)
                grid.table.find("tr[data-uid='" + row.uid + "']").find("td#tdPaar").css( 'color','red');  //.addClass("highlighted-row");
        });
        
    }


    function onError(e) {
     //   hideProgress();
        if (e.errors) {
            var message="";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this;// + "\n";
                        if(message.indexOf('A value is required.')>-1)
                        {
                            message = message.replace('A value is required.','');
                        }
                    });
                }
            });
            
           
            if(message.indexOf('הצלחה')>-1)
            {
             //   $("#hidMessage").val(message);
                AlertMessageGrid(message,170,300);
               // $("#btnShow").click();
                //setTimeout(function () {
                //    $("#btnShow").click();
                //}, 200);
            }
            else 
                AlertMessage(message,200,400);
        }
    }


    function AlertMessageGrid(msg, height, width) {
        $('.ui-dialog').css("clear", "both");
        $("#dialog-grid").html(msg);
        $("#dialog-grid").dialog({
            resizable: false,
            modal: true,
            title: "הודעה",
            height: height,
            focus: function (event, ui) { document.activeElement.blur(); },
            buttons: {
                "אישור": function () {
                    $(this).dialog("close");
                    $("#btnShow").click();
                }
            }
        });
    }
    /* function CheakValid(obj) {
         //  debugger;
         if (obj.value != '') {
             if (IsNumeric(obj.value) == false) {
                 $("#btnExecSearch").attr('disabled', 'disabled');
                 // $("#btnExecSearch").prop("disabled", true);             
                 //  alert("מספר אישי לא חוקי");
                 $('#MisparIshi').focus();
             }
             else {
                 SetNameOved(obj);
                 //$("#btnExecSearch").prop("disabled", false);
                 $("#btnExecSearch").removeAttr('disabled');
             }
         }
     }*/

    /************************************************************/
    
    function ShowReportNochechut(misparIshi) {
        //   alert(kod);
        var titel = " דו''ח נוכחות ";
        // titel = titel + name + " לחודש " + " \n ";
        // titel = titel + month;
        //$("#dialogNoch").html("")
        //    .dialog("option", "title", titel)
        //    .load('/Budget/GetReportNochechut?MisparIshi=' + kod + "&chodesh=" + month, function () { $("#dialogNoch").dialog("open"); });
        var model = @Html.Raw(Json.Encode(Model));
        var month =model.SelectedMonth;
       
        //SelectedMonth
        window.open('/Budget/GetReportNochechut?MisparIshi=' + misparIshi + "&chodesh=" + month, '_blank', "toolbar=no,scrollbars=yes,location=no,resizable =yes,left=150,top=10,width=950,height=850");


    }

    function GetImage(image) {
        var returnString = '<img src="~/Content/Images/kds.png" title=\"image\" height=\"24\" alt=\"image\"/>';   
        return returnString;
    }

    //$(function () {
    //    $("#dialogNoch").dialog(
    //        {
    //            autoOpen: false, width: 'auto',
    //            height: 'auto',
    //            modal: false,
    //            buttons: {
    //                "סגור": function () {
    //                    $(this).dialog("close");
    //                }
    //            }
    //        });
    //});


    //$(function ()
    //{
    //    $("#EmployeesList").find(".k-grid-toolbar").insertAfter($("#grid .k-grid-content"));
    //});


  

   
    function GetColumnIndex(columnName) {
        var grid = $("#EmployeesList").data("kendoGrid");
        var columns = grid.columns;
        for (var i = 0; i < columns.length; i++)
            if (columns[i].field == columnName)
                return i;
        return -1;
    };

       

   

    //function SetMisparIshi(obj) {
    //    if (obj.value != '') {
    //        $.ajax({
    //            type: "POST",
    //            url: "/Budget/GetOvedIdByName",
    //            contentType: "application/json; charset=utf-8",
    //            data: "{sName:'" + obj.value + "'}",
    //            dataType: "json",
    //            async: false,
    //            success: function (response) {

    //                if (response != '')
    //                    $('#MisparIshi').val(response);
    //                else {
    //                    $('#OvedName').focus();
    //                    alert('שם זה לא קיים למתקן זה');
    //                }
    //            },
    //            error: function (XMLHttpRequest, textStatus, errorThrown) {
    //                alert("תקלה:" + errorThrown);
    //            }
    //        });
    //    }
    //}

    //function SetNameOved(obj) {

    //    $.ajax({
    //        type: "POST",
    //        url: "/Budget/GetOvedNameById",
    //        contentType: "application/json; charset=utf-8",
    //        data: "{id:'" + obj.value + "'}",
    //        dataType: "json",
    //        async: false,
    //        success: function (response) {
    //            if (response != '')
    //                $('#OvedName').val(response);
    //            else {
    //                $('#MisparIshi').focus();
    //                alert('מספר אישי זה לא קיים למתקן זה');
    //            }
    //        },
    //        error: function (XMLHttpRequest, textStatus, errorThrown) {
    //            alert("תקלה:" + errorThrown);
    //        }
    //    });
    //}


     





        








    //function ShowPopUp(misparIshi) {
    //    //  $("#dialog").dialog();
    //    $("#dialog").html("")
    //        .dialog("option", "title", "הפחתות והוספות")
    //        .load('/Budget/DispalyChanges?ovedId=' + misparIshi,
    //      function () { $("#dialog").dialog("open"); });

    //}

    //$(function ()
    //{
    //    $("#dialog").dialog(
    //        {
    //            autoOpen: false, width: 400, height: 450, model: true,
    //            buttons: {
    //                "Close": function () {
    //                    $(this).dialog("close");
    //                }
    //            }
    //        });
    //});

       
</script>
