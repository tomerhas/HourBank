@model BsmWebApp.ViewModels.Changes.ChangesMainViewModel

 <script>
      $(document).ready(function () {
          $("#MitkanName").kendoAutoComplete({
              // placeholder: "Enter site ...",
              // dataTextField: "SiteName",
              dataTextField: "TeurYechida",
              dataValueField: "KodYechida",
              filter: "startswith",
              minLength: 1,
              dataSource: {
                  type: "json",
                  serverFiltering: true,
                  serverPaging: true,
                  pageSize: 20,
                  transport: {
                      read:
                          {
                              url: "Changes/GetMitkanStartsWith"
                          }, //read
                      parameterMap: function () {// send value of autocomplete as the "startsWith" parameter
                          return {
                              startsWith: $("#MitkanName").data("kendoAutoComplete").value()
                          };
                      }
                  } //transport
              } //datasource
          }); //kendoAutoComplete
      }); //DocumentReady
     
        </script>
<div>
    @*<h4>MitkanBudget</h4>*@
    
    <hr class="styled" />

    @using(Html.BeginForm())
    { 
    <div class="row">
        <div class="col-md-1 col-md-push-11" > איזור:</div>  
        <div class="col-md-1 col-md-push-9">    
              @Html.DropDownListFor(m => m.SelectedEzor, Model.Ezors, "")
        </div>  

        <div class="col-md-1 col-md-push-6" > שם מתקן:</div>  
        <div class="col-md-2 col-md-push-3">    
              @Html.TextBoxFor(m=>m.MitkanName)
        </div>  

        <div class="col-md-1 col-md-pull-1" > חודש:</div>  
        <div class="col-md-1 col-md-pull-3">
            @Html.DropDownListFor(m => m.SelectedMonth, Model.Months )
        </div>
        
        <div class="col-md-1 col-md-pull-6">
            <input type="submit" value="הצג"  />
        </div>
       
    </div>
    
  <hr class="styled" />
   <br /> 
        if (Model.Changes.Count > 0)
    {       
        <div id="grdChanges" class="t-rtl">
              @{
            //<a class="analyticsDetailsInfo" href="/Admin/ModifyExamAnalytic?examTypeId=225&analyticId=Core&addAnalytic=False">ערוך אנליטיקה</a>
            //Html.Kendo().Grid(Model.UsersInMitkan.Employees)
            Html.Kendo().Grid<BsmCommon.DataModels.Changes.BudgetChangesGrid>()
               .Name("ChangesShaotNosafot").Columns(columns =>
               {
                   columns.Bound(o => o.Masad).Title("מס''ד").Width(50);
                   columns.Bound(o => o.KodYechida).Title("שם מתקן").HtmlAttributes(new { style = "border: 8px double lightgray;" }).Width(80);
                   columns.Bound(o => o.Budget).Title("תקציב שעות נוספות").Width(100);
                   columns.Bound(o => o.LastMonthYitra).Title("יתרת תקציב מחודש שעבר").Width(100);
                   columns.Bound(o => o.Diffrence).Title("שעות ניוד/מבצע").HtmlAttributes(new { style = "border: 8px double lightgray;" }).Width(50);
                   columns.Bound(o => o.Takziv).Title("תקציב מעודכן").Width(80);
                   columns.Bound(o => o.Reason).Title("הנמקה/מבצע").HtmlAttributes(new { style = "border: 8px double lightgray;" }).Width(80);

               })
                .ToolBar(toolbar =>
                {
                   
                    toolbar.Custom().Text("עדכן שינויים").HtmlAttributes(new { @class = "k-grid-save-changes k-update" });
                    toolbar.Custom().Text("בטל שינויים").HtmlAttributes(new { @class = "k-grid-cancel-changes k-cancel", @imageClass = "k-icon ob-icon-only k-i-custom" });
                    toolbar.Create().Text("הוסף רשומה").HtmlAttributes(new { @class = "k-grid-save-changes k-update" });
                })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Pageable()
                .Events(events => events.DataBound("onDataBound"))
                //.Editable(editable => editable.Mode(GridEditMode.InCell)) // Use in-cell editing mode
                .DataSource(dataSource =>
                    dataSource.Ajax()
                        .PageSize(10)
                        .ServerOperation(false)
                        .Batch(true) // Enable batch updates
                        .Model(model =>
                        {
                            model.Id(change => change.Masad); // Specify the property which is the unique identifier of the model

                            model.Field(change => change.Masad).Editable(false);
                           // model.Field(change => change.KodYechida).Editable(false);
                            model.Field(change => change.Budget).Editable(false);
                            model.Field(change => change.LastMonthYitra).Editable(false);
                          //  model.Field(change => change.Diffrence).Editable(false);
                            model.Field(change => change.Takziv).Editable(false);
                          //  model.Field(change => change.Reason).Editable(false);
                           

                        })
                    .Read(read => read.Action("ChangesShaotNosafotRead", "Changes", new { KodEzor = Model.KodEzor, KodYechida = Model.KodMitkan, month = Model.Month }))  // Action method invoked when the grid needs data
                    .Create(create => create.Action("ChangesShaotNosafotCreate", "Changes")) // Action method invoked when the user saves a new data item
                    .Update(update => update.Action("ChangesShaotNosafotUpdate", "Changes"))  // Action method invoked when the user saves an updated data item
                //.Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action method invoked when the user removes a data item
                )

               .Render();
           
        
            }
        </div>
    
       <hr class="styled" />
    }
}
</div>
<script type="text/javascript" >
 function onDataBound(arg) {
        //var grid = $("#EmployeesList").data("kendoGrid");
        //var trs = grid.tbody.find('tr');
        //trs.each(function () {
        //    var dt = grid.dataItem($(this));
        //    if (dt.dirty == true) {
        //        grid._modelChange({ field: "MichsaCur", model: dt });
        //    }
        //});
 }
 </script>